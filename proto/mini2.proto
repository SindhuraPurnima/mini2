syntax = "proto3";

package mini2;

// Full collision data structure matching CSV columns
message CollisionData {
    // Time and Location
    string crash_date = 1;
    string crash_time = 2;
    string borough = 3;
    string zip_code = 4;
    double latitude = 5;
    double longitude = 6;
    string location = 7;
    string on_street_name = 8;
    string cross_street_name = 9;
    string off_street_name = 10;

    // Injury/Fatality Counts
    int32 number_of_persons_injured = 11;
    int32 number_of_persons_killed = 12;
    int32 number_of_pedestrians_injured = 13;
    int32 number_of_pedestrians_killed = 14;
    int32 number_of_cyclist_injured = 15;
    int32 number_of_cyclist_killed = 16;
    int32 number_of_motorist_injured = 17;
    int32 number_of_motorist_killed = 18;

    // Vehicle Information
    string contributing_factor_vehicle_1 = 19;
    string contributing_factor_vehicle_2 = 20;
    string contributing_factor_vehicle_3 = 21;
    string contributing_factor_vehicle_4 = 22;
    string contributing_factor_vehicle_5 = 23;
    string collision_id = 24;
    string vehicle_type_code_1 = 25;
    string vehicle_type_code_2 = 26;
    string vehicle_type_code_3 = 27;
    string vehicle_type_code_4 = 28;
    string vehicle_type_code_5 = 29;
    int32 year = 30;
}

// Optimized message for analysis (similar to  Mini 1 struct)
message AnalysisRecord {
    string crash_date = 1;
    string borough = 2;
    string zip_code = 3;
    int32 persons_injured = 4;
    int32 persons_killed = 5;
}

// Service for Python client â†’ Server A communication
service EntryPointService {
    // Defines how clients stream data to Server A
    rpc StreamCollisions(stream CollisionData) returns (Empty) {}
    rpc SignalCompletion(Empty) returns (Empty) {}

}

// Service for inter-server communication (A,B,C,D,E)
service InterServerService {
    // Forward data between servers
    rpc ForwardData(CollisionData) returns (Empty) {}
    rpc PropagateCompletion(Empty) returns (Empty) {}
}

message Empty {}
